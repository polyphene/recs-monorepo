generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id               Int       @id @default(autoincrement())
  // Store as string because uint256
  filecoinTokenId  String?   @unique
  energyWebTokenId String?   @unique
  events           Event[]
  metadata         Metadata? @relation(fields: [metadataId], references: [id])
  metadataId       Int?      @unique
  createdAt        DateTime  @default(now())
}

model Metadata {
  id             Int         @id @default(autoincrement())
  cid            String      @unique
  collection     Collection?
  contractId     String?
  productType    String?
  label          String?
  energySources  String?
  contractDate   String?
  deliveryDate   String?
  reportingStart String?
  reportingEnd   String?
  sellerName     String?
  sellerAddress  String?
  country        String?
  region         String?
  volume         String?
  createdBy      String
  minted         Boolean
  createdAt      DateTime    @default(now())
}

model Event {
  id              Int         @id @default(autoincrement())
  collectionId    Int?
  collection      Collection? @relation(fields: [collectionId], references: [id])
  chain           Chain       @default(FILECOIN)
  // Store as string because uint256
  tokenId         String?
  eventType       EventType
  data            Json
  blockHeight     String
  transactionHash String
  logIndex        Int
  createdAt       DateTime    @default(now())

  @@unique([blockHeight, transactionHash, logIndex])
}

enum EventType {
  // Filecoin events
  TRANSFER
  LIST
  BUY
  REDEEM
  GRANT_ROLE
  REVOKE_ROLE
  // EWC events
  CLAIM
  REDEMPTION_SET
  CERTIFICATE_BATCH_MINTED
  // Common
  MINT
}

enum Chain {
  FILECOIN
  ENERGY_WEB
}

model AddressRoles {
  id         Int      @id @default(autoincrement())
  address    String   @unique
  isAdmin    Boolean  @default(false)
  isMinter   Boolean  @default(false)
  isRedeemer Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Transaction {
  id              Int             @id @default(autoincrement())
  hash            String?         @unique
  rawArgs         Json
  transactionType TransactionType
  success         Boolean?
  nonce           Int?
  createdAt       DateTime        @default(now())
}

enum TransactionType {
  MINT
}
