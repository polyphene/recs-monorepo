generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id                  Int       @id @default(autoincrement())
  // Store as string because uint256
  filecoinTokenId     String?   @unique
  energyWebTokenIds   String[]
  events              Event[]
  balances            Balance[]
  Listing             Listing[]
  metadata            Metadata  @relation(fields: [metadataId], references: [id])
  metadataId          Int       @unique
  redemptionStatement String?
  createdAt           DateTime  @default(now())
}

model Metadata {
  id             Int         @id @default(autoincrement())
  cid            String      @unique
  collection     Collection?
  contractId     String
  productType    String
  label          String
  energySources  String
  contractDate   String
  deliveryDate   String
  reportingStart String
  reportingEnd   String
  sellerName     String
  sellerAddress  String
  country        String
  region         String
  volume         String
  createdBy      String
  minted         Boolean
  createdAt      DateTime    @default(now())
}

model Event {
  id              Int         @id @default(autoincrement())
  collectionId    Int?
  collection      Collection? @relation(fields: [collectionId], references: [id])
  // Store as string because uint256
  tokenId         String?
  eventType       EventType
  data            Json
  blockHeight     String
  transactionHash String
  logIndex        Int
  createdAt       DateTime    @default(now())

  @@unique([blockHeight, transactionHash, logIndex])
}

enum EventType {
  // Filecoin events
  TRANSFER
  LIST
  BUY
  REDEEM
  GRANT_ROLE
  REVOKE_ROLE
  MINT
  REDEMPTION_STATEMENT_SET
}

model User {
  id         Int       @id @default(autoincrement())
  balances   Balance[]
  address    String    @unique
  isAdmin    Boolean   @default(false)
  isMinter   Boolean   @default(false)
  isRedeemer Boolean   @default(false)
  listings   Listing[] @relation("Seller")
  purchases  Listing[] @relation("Buyer")
  createdAt  DateTime  @default(now())
}

model Balance {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userAddress], references: [address])
  userAddress  String
  collectionId Int
  collection   Collection? @relation(fields: [collectionId], references: [id])
  amount       String
  redeemed     String      @default("0")

  @@unique([userAddress, collectionId])
}

model Listing {
  id            Int        @id @default(autoincrement())
  seller        User       @relation("Seller", fields: [sellerAddress], references: [address])
  sellerAddress String
  collectionId  Int
  collection    Collection @relation(fields: [collectionId], references: [id])
  amount        String
  buyer         User?      @relation("Buyer", fields: [buyerAddress], references: [address])
  buyerAddress  String?
  unitPrice     String

  @@unique([sellerAddress, collectionId])
}

model Transaction {
  id              Int             @id @default(autoincrement())
  hash            String?         @unique
  rawArgs         Json
  transactionType TransactionType
  success         Boolean?
  nonce           Int?
  createdAt       DateTime        @default(now())
}

enum TransactionType {
  MINT
}

model Utils {
  id                  Int    @id @default(autoincrement())
  ewcBlockHeight      String
  filecoinBlockHeight String
}
